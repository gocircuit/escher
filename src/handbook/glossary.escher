
BuildGlossaryPage {
		wf *io.WriteFile
		wf:Content = *GlossaryPage
		wf:Name = "glossary.html"
		: = wf:Ready
}

GlossaryPage {
	h *Html
	h: = :
	h:Title = "Escher - Explanation of important words"
	h:Body = t:

	t *text.QuickForm
	t:Data = {}
	t:Form = `

<h1>Explanation of important words</h1>

<p>Gate statements begin on a new line with a gate name identifier, space, and a gate value expression.
	There are six value types that can be expressed:

<table class='paddingBetweenRows'>
	<tr>
		<th>Word</th>
		<th>Alternative Words</th>
		<th>Meaning</th>
		<th>Syntax</th>
		<th>Example</th>
		<th>Explanation</th>
	</tr>
	<tr id="address">
		<td><a href="#address">Address</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td><code>rootFaculty.parentFac.childFac.theGate</code><br>
			TODO or is it <code>"topMostGate.lowerGate.lowestGate"</code> ?<br>
			I think it is the first one,
			but what is the second one? or is it an address too?<br>
			I guess it is practically simply never used/required.
		</td>
		<td>
			The <em>fully qualified path</em> to a gate, relative to a certain <a href="#index">Index</a>.
		</td>
	</tr>
	<tr id="circuit">
		<td><a href="#circuit">Circuit</a></td>
		<td>-</td>
		<td><a href="meaning.html#circuits">Circuit meaning</a></td>
		<td><a href="syntax.html#circuits">Circuit syntax</a></td>
		<td>TODO</td>
		<td>TODO</td>
	</tr>
	<tr id="default_valve">
		<td><a href="#default_valve">Default Valve</a></td>
		<td></td>
		<td></td>
		<td></td>
		<td>
			<code>gateX:</code> (vector on gate <code>gateX</code> with the default valve)<br>
			<code>:</code> (vector on the super gate with the default valve)
		</td>
		<td>TODO</td>
	</tr>
	<tr id="directive">
		<td><a href="#directive">Directive</a></td>
		<td>-</td>
		<td><a href="meaning.html#directives">Directive meaning</a></td>
		<td>-</td>
		<td>
			<a href="#materialize">materialize</a>:
			<code class="escher">*fully.qualified.Name</code><br>
			<a href="#recall">recall</a>:
			<code class="escher">@fully.qualified.Name</code>
		</td>
		<td>TODO</td>
	</tr>
	<tr id="faculty">
		<td><a href="#faculty">Faculty</a></td>
		<td>package?</td>
		<td><a href="meaning.html#faculty">Faculty meaning</a></td>
		<td>-</td>
		<td>-</td>
		<td>
			Eschers word for a <b>namespace</b>; a group of escher source files in a single directory,
			respectively the circuits therein.
		</td>
	</tr>
	<tr id="flow">
		<td><a href="#flow">Flow</a></td>
		<td></td>
		<td></td>
		<td></td>
		<td></td>
		<td>
			TODO (A synonym for Link?) see go code of the circuit struct
			at <a href="https://github.com/hoijui/escher/blob/master/circuit/circuit.go#L17">circuit/circuit.go</a>
		</td>
	</tr>
	<tr id="gate">
		<td><a href="#gate">Gate</a></td>
		<td>Membrane?<br> Brane?</td>
		<td>-</td>
		<td><a href="syntax.html#gates">Gate syntax</a></td>
		<td>TODO</td>
		<td>TODO</td>
	</tr>
	<tr id="index">
		<td><a href="#index">Index</a></td>
		<td>-</td>
		<td><a href="meaning.html#indices">Index meaning</a></td>
		<td>-</td>
		<td>TODO</td>
		<td>TODO</td>
	</tr>
	<tr id="link">
		<td><a href="#link">Link</a></td>
		<td><a href="#flow">Flow</a></td>
		<td>-</td>
		<td><a href="syntax.html#links">Link syntax</a></td>
		<td>
			<code>gateX:valveNo3 = gateY:valveNo2</code><br>
			<code>:valveNo3 = gateX:</code><br>
		</td>
		<td>A connection between two <a href="#vector">vectors</a>.</td>
	</tr>
	<tr id="map">
		<td><a href="#map">Map</a></td>
		<td>-</td>
		<td><a href="meaning.html#maps">Map meaning</a></td>
		<td>-</td>
		<td>
			<pre class="escher">
ImplicitIntMap {
	*fully.qualified.Name
	123
	3.14
}

ExplicitIntMap {
	3   *fully.qualified.Name
	6   @fully.qualified.Name
	1   123
}

StringMap {
	directive  *fully.qualified.Name
	integral   123
	floating   3.14
}
			</pre>
		</td>
		<td>TODO</td>
	</tr>
	<tr id="materialize">

		<td><a href="#materialize">materialize</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>TODO</td>
		<td>TODO</td>
	</tr>
	<tr id="name">
		<td><a href="#name">Name</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>
			The name part of a <a href="#gate">gate</a>.
			Each gate is comprised of a name and a <a href="#value">value</a>.
			A name can be any string without spaces,
			but in practise you probably want to limit it more,
			say to a common definition of a variable name as found in many other languages,
			for example using the regex: <code>[a-zA-Z0-9_]+</code>
		</td>
	</tr>
	<tr id="program">
		<td><a href="#program">Program</a></td>
		<td>runnable/executable circuit?</td>
		<td><a href="meaning.html#programs">Program meaning</a></td>
		<td>-</td>
		<td>
			See any of the <code>*Main</code> circuits in the
			<a href="https://github.com/gocircuit/escher/tree/master/src/tutorial">Escher tutorials</a>
		</td>
		<td>TODO</td>
	</tr>
	<tr id="recall">
		<td><a href="#recall">recall</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>TODO</td>
		<td>TODO</td>
	</tr>
	<tr id="series">
		<td><a href="#series">Series</a></td>
		<td></td>
		<td><a href="meaning.html#series">Series meaning</a></td>
		<td><a href="syntax.html#series">Series syntax</a></td>
		<td>
			implicit series:
			<pre class="escher">
alpha {
	*fully.qualified.Name
	@fully.qualified.Name
	123
	3.14
	(1-3i)
	"abcd\n\tefgh"
	{{ .Gate.BackQuoted }}
	{
		A 1
		B "C"
	}
}
			</pre>

			which is equivalent to this explicit series:

			<pre class="escher">
alpha {
	0 *fully.qualified.Name
	1 @fully.qualified.Name
	2 123
	3 3.14
	4 (1-3i)
	5 "abcd\n\tefgh"
	6 {{ .Gate.BackQuoted }}
	7 {
		A 1
		B "C"
	}
}
			</pre>
		</td>
		<td>TODO</td>
	</tr>
	<tr id="super_gate">
		<td><a href="#super_gate">Super Gate</a></td>
		<td>super-membrane<br> super-brane</td>
		<td>-</td>
		<td>-</td>
		<td>
			<code>:valveNo3</code> (vector with valve <code>valveNo3</code> on the super gate)<br>
			<code>:</code> (vector with default valve on the super gate)
		</td>
		<td>TODO</td>
	</tr>
	<tr id="tree">
		<td><a href="#tree">Tree</a></td>
		<td>-</td>
		<td><a href="meaning.html#trees">Tree meaning</a></td>
		<td>-</td>
		<td>
			<pre class="escher">
Tree {
	Trunk {
		Branches {
			"Johnny"
			"Katie"
		}
	}
	Root {
		Tentacles {
			"Grandpa"
			"Grandma"
		}
	}
}
			</pre>
		</td>
		<td>TODO</td>
	</tr>
	<tr id="value">
		<td><a href="#value">Value</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>
			<pre class="escher">
SomeCircuit {
	directive1 *fully.qualified.Name
	directive2 @fully.qualified.Name
	integral   123
	floating   3.14
	complex	(1-3i)
	quoted	 "abcd\n\tefgh"
	backQuoted {{ .Gate.BackQuoted }}
}
			</pre>
		</td>
		<td>
			The value part of a <a href="#gate">gate</a>.
			Each gate is comprised of a <a href="#name">name</a> and a value.
			FIXME Some point of the documentation says, the value cna be any Go value, while an other part states,
			that it cane be one of Integer, Float, complex-number, string, directive or circuit. Both can't be true.
		</td>
	</tr>
	<tr id="valve">
		<td><a href="#valve">Valve</a></td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>-</td>
		<td>TODO</td>
	</tr>
	<tr id="vector">
		<td><a href="#vector">Vector</a></td>
		<td>valve-ID?</td>
		<td>-</td>
		<td>-</td>
		<td>
			<code>gateX:valveNo3</code><br>
			<code>:valveNo3</code><br>
			<code>gateX:</code><br>
			<code>:</code>
		</td>
		<td>
			A qualified <a href="#valve">valve</a>, consisting of a <a href="#gate">gate</a>-name
			and one of its valves names, separated with a <code>":"</code>.<br>
			If the gate is being omitted, the vector refers to the <a href="#super_gate">super gte</a>.<br>
			If the valve is being omitted, the vector refers to the <a href="#default_valve">default valve</a>.
		</td>
	</tr>
	<tr id="verb">
		<td><a href="#verb">Verb</a></td>
		<td>instruction?</td>
		<td>-</td>
		<td>-</td>
		<td>
			<code>*</code><br> or<br> <code>@</code>
		</td>
		<td>
			Can be either <code>"*"</code> (<a href="#materialize">materialize</a>)
			or <code>"@"</code> (<a href="#recall">recall</a>),
			and is the first part of a <a href="#directive">Directive</a>
		</td>
	</tr>
</table>

{{.Gate.Ticker}}

`
}
